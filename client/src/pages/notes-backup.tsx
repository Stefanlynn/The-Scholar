import { useState, useRef } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import { queryClient } from "@/lib/queryClient";
import { apiRequest } from "@/lib/queryClient";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Badge } from "@/components/ui/badge";
import { Skeleton } from "@/components/ui/skeleton";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { useToast } from "@/hooks/use-toast";
import { Plus, Search, FileText, Edit, Trash2, PenTool, BookOpen, Mic, Lightbulb, Quote, Volume2, Wand2, RotateCcw, Download, Copy, MessageSquareText, NotebookPen, HelpCircle } from "lucide-react";
import type { Note } from "@shared/schema";
import PageHelp from "@/components/page-help";

export default function Notes() {
  const [searchQuery, setSearchQuery] = useState("");
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [editingNote, setEditingNote] = useState<Note | null>(null);
  const [activeTab, setActiveTab] = useState("notes");
  const { toast } = useToast();

  // Helper functions for copy and download
  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
      toast({ title: "Copied to clipboard" });
    } catch (error) {
      toast({ title: "Failed to copy", variant: "destructive" });
    }
  };

  const downloadAsDocument = (content: string, filename: string) => {
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    toast({ title: "Document downloaded" });
  };

  const generateSermonDocument = () => {
    const timestamp = new Date().toLocaleDateString();
    const content = `
SERMON WORKSPACE - ${timestamp}

Title: ${sermonTitle || "Untitled Sermon"}
Scripture: ${sermonScripture || ""}
Theme: ${sermonTheme || ""}

${sermonContent || ""}

---
Generated by The Scholar - Biblical Study Assistant
    `.trim();
    
    downloadAsDocument(content, `sermon-${timestamp.replace(/\//g, '-')}.txt`);
  };

  // Sermon workspace state
  const [sermonTitle, setSermonTitle] = useState("");
  const [sermonScripture, setSermonScripture] = useState("");
  const [sermonTheme, setSermonTheme] = useState("");
  const [sermonContent, setSermonContent] = useState("");
  const [writingMode, setWritingMode] = useState("outline");
  const [voiceStyle, setVoiceStyle] = useState("teaching");
  const [selectedText, setSelectedText] = useState("");
  const [previousContent, setPreviousContent] = useState("");
  const [isEnhancing, setIsEnhancing] = useState(false);
  const [enhancingAction, setEnhancingAction] = useState("");
  const sermonTextareaRef = useRef<HTMLTextAreaElement>(null);

  // Enhanced AI functionality for sermon workspace
  const enhanceSermonMutation = useMutation({
    mutationFn: async ({ text, method, style }: { text: string; method: string; style?: string }) => {
      const response: Response = await apiRequest('/api/chat/enhance', {
        method: 'POST',
        body: { text, method, style: style || voiceStyle }
      });
      
      if (!response.ok) {
        throw new Error('Failed to enhance content');
      }
      
      return response.text();
    },
    onSuccess: (enhancedText) => {
      if (sermonTextareaRef.current) {
        const textarea = sermonTextareaRef.current;
        const start = textarea.selectionStart;
        const end = textarea.selectionEnd;
        const newContent = sermonContent.substring(0, start) + enhancedText + sermonContent.substring(end);
        setSermonContent(newContent);
      }
      setIsEnhancing(false);
      setEnhancingAction("");
      toast({ title: "Content enhanced successfully" });
    },
    onError: (error) => {
      console.error('Enhancement error:', error);
      setIsEnhancing(false);
      setEnhancingAction("");
      toast({ title: "Failed to enhance content", variant: "destructive" });
    }
  });

  const handleEnhancement = (method: string, actionLabel: string) => {
    if (sermonTextareaRef.current) {
      const textarea = sermonTextareaRef.current;
      const start = textarea.selectionStart;
      const end = textarea.selectionEnd;
      const selected = sermonContent.substring(start, end);
      
      if (!selected.trim()) {
        toast({ title: "Please select text to enhance", variant: "destructive" });
        return;
      }
      
      setPreviousContent(sermonContent);
      setSelectedText(selected);
      setIsEnhancing(true);
      setEnhancingAction(actionLabel);
      enhanceSermonMutation.mutate({ text: selected, method });
    }
  };

  const undoLastChange = () => {
    if (previousContent) {
      setSermonContent(previousContent);
      setPreviousContent("");
      toast({ title: "Changes reverted" });
    }
  };

  // Note queries and mutations
  const { data: notes, isLoading: notesLoading } = useQuery({
    queryKey: ['/api/notes'],
    enabled: true,
  });

  const createNoteMutation = useMutation({
    mutationFn: (noteData: { title: string; content: string; tags: string[] }) =>
      apiRequest('/api/notes', {
        method: 'POST',
        body: noteData,
      }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/notes'] });
      setIsDialogOpen(false);
      toast({ title: "Note created successfully" });
    },
    onError: () => {
      toast({ title: "Failed to create note", variant: "destructive" });
    },
  });

  const updateNoteMutation = useMutation({
    mutationFn: ({ id, ...noteData }: { id: number; title: string; content: string; tags: string[] }) =>
      apiRequest(`/api/notes/${id}`, {
        method: 'PATCH',
        body: noteData,
      }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/notes'] });
      setIsDialogOpen(false);
      setEditingNote(null);
      toast({ title: "Note updated successfully" });
    },
    onError: () => {
      toast({ title: "Failed to update note", variant: "destructive" });
    },
  });

  const deleteNoteMutation = useMutation({
    mutationFn: (id: number) => apiRequest(`/api/notes/${id}`, { method: 'DELETE' }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/notes'] });
      toast({ title: "Note deleted successfully" });
    },
    onError: () => {
      toast({ title: "Failed to delete note", variant: "destructive" });
    },
  });

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const formData = new FormData(e.currentTarget);
    const title = formData.get('title') as string;
    const content = formData.get('content') as string;
    const tags = (formData.get('tags') as string).split(',').map(tag => tag.trim()).filter(Boolean);

    if (editingNote) {
      updateNoteMutation.mutate({ id: editingNote.id, title, content, tags });
    } else {
      createNoteMutation.mutate({ title, content, tags });
    }
  };

  const manualNotes = notes?.filter((note: Note) => !note.tags.includes('ai-generated')) || [];
  const journalNotes = notes?.filter((note: Note) => note.tags.includes('journal')) || [];

  const filteredNotes = (notesList: Note[]) => {
    if (!searchQuery) return notesList;
    return notesList.filter(note =>
      note.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
      note.content.toLowerCase().includes(searchQuery.toLowerCase()) ||
      note.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()))
    );
  };

  const renderNotesSection = (notesList: Note[], title: string, description: string) => {
    const filtered = filteredNotes(notesList);
    
    if (notesLoading) {
      return (
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
          {[...Array(6)].map((_, i) => (
            <Card key={i} className="bg-[var(--scholar-darker)] border-gray-700">
              <CardHeader>
                <Skeleton className="h-4 w-3/4 bg-gray-600" />
              </CardHeader>
              <CardContent>
                <Skeleton className="h-20 w-full bg-gray-600" />
              </CardContent>
            </Card>
          ))}
        </div>
      );
    }

    if (filtered.length === 0) {
      return (
        <div className="text-center py-12">
          <FileText className="mx-auto h-12 w-12 text-gray-400 mb-4" />
          <h3 className="text-lg font-medium text-gray-300 mb-2">
            {searchQuery ? "No notes found" : `No ${title.toLowerCase()} yet`}
          </h3>
          <p className="text-gray-400 mb-4">
            {searchQuery ? "Try a different search term" : description}
          </p>
        </div>
      );
    }

    return (
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        {filtered.map((note) => (
          <Card key={note.id} className="bg-[var(--scholar-darker)] border-gray-700 hover:border-[var(--scholar-gold)]/50 transition-colors group">
            <CardHeader className="pb-3">
              <div className="flex items-start justify-between">
                <CardTitle className="text-white text-base font-medium leading-tight line-clamp-2 group-hover:text-[var(--scholar-gold)] transition-colors">
                  {note.title}
                </CardTitle>
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button variant="ghost" size="sm" className="h-8 w-8 p-0 opacity-0 group-hover:opacity-100 transition-opacity">
                      <span className="sr-only">Open menu</span>
                      <Edit className="h-4 w-4" />
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent align="end" className="bg-[var(--scholar-dark)] border-gray-700">
                    <DropdownMenuItem
                      onClick={() => {
                        setEditingNote(note);
                        setIsDialogOpen(true);
                      }}
                      className="text-white hover:bg-gray-700"
                    >
                      <Edit className="mr-2 h-4 w-4" />
                      Edit
                    </DropdownMenuItem>
                    <DropdownMenuItem
                      onClick={() => deleteNoteMutation.mutate(note.id)}
                      className="text-red-400 hover:bg-red-900/20"
                    >
                      <Trash2 className="mr-2 h-4 w-4" />
                      Delete
                    </DropdownMenuItem>
                  </DropdownMenuContent>
                </DropdownMenu>
              </div>
            </CardHeader>
            <CardContent className="pt-0">
              <p className="text-gray-300 text-sm line-clamp-3 mb-3">
                {note.content}
              </p>
              {note.tags.length > 0 && (
                <div className="flex flex-wrap gap-1">
                  {note.tags.slice(0, 3).map((tag) => (
                    <Badge
                      key={tag}
                      variant="secondary"
                      className="bg-[var(--scholar-gold)]/10 text-[var(--scholar-gold)] border-[var(--scholar-gold)]/20 text-xs"
                    >
                      {tag}
                    </Badge>
                  ))}
                  {note.tags.length > 3 && (
                    <Badge variant="secondary" className="bg-gray-700 text-gray-300 text-xs">
                      +{note.tags.length - 3}
                    </Badge>
                  )}
                </div>
              )}
            </CardContent>
          </Card>
        ))}
      </div>
    );
  };

  return (
    <div className="flex-1 flex flex-col overflow-hidden">
      {/* Hero Header */}
      <div className="bg-gradient-to-br from-[var(--scholar-dark)] via-gray-900 to-indigo-950 px-4 md:px-6 py-8 md:py-12">
        <div className="max-w-6xl mx-auto">
          <div className="flex items-center justify-between mb-6">
            <div className="flex items-center space-x-4">
              <div className="w-16 h-16 bg-gradient-to-br from-[var(--scholar-gold)] to-amber-500 rounded-2xl flex items-center justify-center shadow-2xl">
                <NotebookPen className="h-8 w-8 text-black" />
              </div>
              <div>
                <h1 className="text-3xl md:text-4xl font-bold bg-gradient-to-r from-white via-gray-100 to-blue-200 bg-clip-text text-transparent">
                  Notes & Sermons
                </h1>
                <p className="text-gray-400 text-lg mt-2">Capture insights, build sermons, grow in wisdom</p>
              </div>
            </div>
            <PageHelp 
              pageName="Notes"
              helpContent={{
                title: "Notes & Sermon Workspace Help",
                description: "Manage your study notes, daily journal entries, and sermon preparation in one place.",
                features: [
                  {
                    title: "Study Notes",
                    description: "Create and organize your biblical study notes",
                    tips: ["Use tags to categorize your notes", "Search across all your content", "Edit notes anytime with the menu"]
                  },
                  {
                    title: "Daily Journal",
                    description: "Record your daily spiritual insights and reflections",
                    tips: ["Write regularly for spiritual growth", "Tag entries by topic or theme", "Review past entries for patterns"]
                  },
                  {
                    title: "Sermon Workspace",
                    description: "Professional sermon preparation with AI assistance",
                    tips: ["Choose your writing mode: Outline, Full Manuscript, or Bullets", "Select text and use AI tools to enhance your content", "Use voice styles to match your preaching approach", "Download or copy your finished sermon"]
                  }
                ]
              }}
            />
          </div>
          
          {/* Quick Actions */}
          <div className="grid grid-cols-1 sm:grid-cols-3 gap-4 mb-8">
            <div 
              onClick={() => setActiveTab('notes')}
              className={`p-6 rounded-xl cursor-pointer transition-all ${
                activeTab === 'notes' 
                  ? 'bg-gradient-to-br from-blue-600/20 to-purple-600/20 border border-blue-500/50' 
                  : 'bg-gray-800/50 border border-gray-700/50 hover:border-gray-600/50'
              }`}
            >
              <div className="flex items-center space-x-4">
                <div className="w-12 h-12 bg-blue-500/20 rounded-xl flex items-center justify-center">
                  <FileText className="w-6 h-6 text-blue-400" />
                </div>
                <div>
                  <h3 className="font-semibold text-white text-lg">Study Notes</h3>
                  <p className="text-sm text-gray-400">{manualNotes.length} notes</p>
                </div>
              </div>
            </div>
            
            <div 
              onClick={() => setActiveTab('journal')}
              className={`p-6 rounded-xl cursor-pointer transition-all ${
                activeTab === 'journal' 
                  ? 'bg-gradient-to-br from-green-600/20 to-teal-600/20 border border-green-500/50' 
                  : 'bg-gray-800/50 border border-gray-700/50 hover:border-gray-600/50'
              }`}
            >
              <div className="flex items-center space-x-4">
                <div className="w-12 h-12 bg-green-500/20 rounded-xl flex items-center justify-center">
                  <PenTool className="w-6 h-6 text-green-400" />
                </div>
                <div>
                  <h3 className="font-semibold text-white text-lg">Daily Journal</h3>
                  <p className="text-sm text-gray-400">{journalNotes.length} entries</p>
                </div>
              </div>
            </div>
            
            <div 
              onClick={() => setActiveTab('sermon')}
              className={`p-6 rounded-xl cursor-pointer transition-all ${
                activeTab === 'sermon' 
                  ? 'bg-gradient-to-br from-[var(--scholar-gold)]/20 to-orange-500/20 border border-[var(--scholar-gold)]/50' 
                  : 'bg-gray-800/50 border border-gray-700/50 hover:border-gray-600/50'
              }`}
            >
              <div className="flex items-center space-x-4">
                <div className="w-12 h-12 bg-[var(--scholar-gold)]/20 rounded-xl flex items-center justify-center">
                  <Mic className="w-6 h-6 text-[var(--scholar-gold)]" />
                </div>
                <div>
                  <h3 className="font-semibold text-white text-lg">Sermon Workspace</h3>
                  <p className="text-sm text-gray-400">Build sermons with AI</p>
                </div>
              </div>
            </div>
          </div>
          
          {/* Search and Add */}
          <div className="flex items-center space-x-4">
            <div className="flex-1 relative">
              <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
              <input
                type="text"
                placeholder="Search your notes and sermons..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="w-full pl-12 pr-4 py-3 bg-gray-800/50 backdrop-blur-sm border border-gray-600/50 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-[var(--scholar-gold)]/50 focus:border-[var(--scholar-gold)]/50"
              />
            </div>
            <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
              <DialogTrigger asChild>
                <Button 
                  className="bg-gradient-to-r from-[var(--scholar-gold)] to-amber-500 hover:from-amber-500 hover:to-[var(--scholar-gold)] text-black font-semibold px-6 py-3 rounded-xl shadow-lg"
                  onClick={() => setEditingNote(null)}
                >
                  <Plus className="h-5 w-5 mr-2" />
                  Create New
                </Button>
              </DialogTrigger>
              <DialogContent className="bg-[var(--scholar-dark)] border-gray-700 text-white max-w-2xl">
                <DialogHeader>
                  <DialogTitle>{editingNote ? "Edit Note" : "Create New Note"}</DialogTitle>
                </DialogHeader>
                <form onSubmit={handleSubmit} className="space-y-4">
                  <div>
                    <Input
                      name="title"
                      placeholder="Note title"
                      defaultValue={editingNote?.title || ""}
                      className="bg-[var(--scholar-darker)] border-gray-600 text-white"
                      required
                    />
                  </div>
                  <div>
                    <Textarea
                      name="content"
                      placeholder="Write your note here..."
                      defaultValue={editingNote?.content || ""}
                      className="bg-[var(--scholar-darker)] border-gray-600 text-white min-h-[200px] resize-none"
                      required
                    />
                  </div>
                  <div>
                    <Input
                      name="tags"
                      placeholder="Tags (comma-separated)"
                      defaultValue={editingNote?.tags?.join(", ") || ""}
                      className="bg-[var(--scholar-darker)] border-gray-600 text-white"
                    />
                  </div>
                  <Button 
                    type="submit" 
                    className="bg-[var(--scholar-gold)] text-black hover:bg-yellow-500 w-full"
                    disabled={createNoteMutation.isPending || updateNoteMutation.isPending}
                  >
                    {editingNote ? "Update Note" : "Create Note"}
                  </Button>
                </form>
              </DialogContent>
            </Dialog>
          </div>
        </div>
      </div>

      {/* Main Content with Library-style Layout */}
      <div className="flex-1 overflow-y-auto p-4 md:p-6 pb-20 md:pb-6">
        <div className="max-w-6xl mx-auto space-y-6 md:space-y-8">
          
          {/* Current Notes Section */}
          {activeTab === 'notes' && (
            <section>
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-2xl md:text-3xl font-bold text-white">Study Notes</h2>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6">
                {filteredNotes.length === 0 ? (
                  <div className="col-span-full text-center py-12">
                    <div className="w-16 h-16 bg-blue-500/20 rounded-xl flex items-center justify-center mx-auto mb-4">
                      <FileText className="w-8 h-8 text-blue-400" />
                    </div>
                    <h3 className="text-xl font-semibold text-white mb-2">No notes yet</h3>
                    <p className="text-gray-400 mb-6">Start capturing your biblical insights and study notes</p>
                    <Button 
                      onClick={() => setIsDialogOpen(true)}
                      className="bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 text-white"
                    >
                      <Plus className="h-4 w-4 mr-2" />
                      Create Your First Note
                    </Button>
                  </div>
                ) : (
                  filteredNotes.map((note) => (
                    <Card key={note.id} className="bg-gradient-to-br from-blue-900/30 to-purple-900/30 border-blue-700/50 hover:border-blue-500/70 transition-all duration-300 hover:scale-105">
                      <CardContent className="p-6">
                        <div className="flex items-start justify-between mb-3">
                          <h3 className="font-semibold text-white text-lg">{note.title}</h3>
                          <DropdownMenu>
                            <DropdownMenuTrigger asChild>
                              <Button variant="ghost" size="sm" className="text-gray-400 hover:text-white">
                                <MoreHorizontal className="h-4 w-4" />
                              </Button>
                            </DropdownMenuTrigger>
                            <DropdownMenuContent className="bg-[var(--scholar-dark)] border-gray-700">
                              <DropdownMenuItem 
                                onClick={() => { setEditingNote(note); setIsDialogOpen(true); }}
                                className="text-gray-300 hover:text-white"
                              >
                                <Edit className="h-4 w-4 mr-2" />
                                Edit
                              </DropdownMenuItem>
                              <DropdownMenuItem 
                                onClick={() => deleteNoteMutation.mutate(note.id)}
                                className="text-red-400 hover:text-red-300"
                              >
                                <Trash2 className="h-4 w-4 mr-2" />
                                Delete
                              </DropdownMenuItem>
                            </DropdownMenuContent>
                          </DropdownMenu>
                        </div>
                        <p className="text-gray-300 text-sm mb-4 line-clamp-3">{note.content}</p>
                        <div className="flex items-center justify-between">
                          <div className="flex flex-wrap gap-1">
                            {note.tags?.slice(0, 2).map((tag, index) => (
                              <Badge key={index} variant="secondary" className="text-xs bg-blue-500/20 text-blue-300">
                                {tag}
                              </Badge>
                            ))}
                            {note.tags && note.tags.length > 2 && (
                              <Badge variant="secondary" className="text-xs bg-gray-500/20 text-gray-400">
                                +{note.tags.length - 2}
                              </Badge>
                            )}
                          </div>
                          <span className="text-xs text-gray-500">
                            {new Date(note.createdAt).toLocaleDateString()}
                          </span>
                        </div>
                      </CardContent>
                    </Card>
                  ))
                )}
              </div>
            </section>
          )}

          {/* Journal Section */}
          {activeTab === 'journal' && (
            <section>
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-2xl md:text-3xl font-bold text-white">Daily Journal</h2>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6">
                {journalNotes.length === 0 ? (
                  <div className="col-span-full text-center py-12">
                    <div className="w-16 h-16 bg-green-500/20 rounded-xl flex items-center justify-center mx-auto mb-4">
                      <PenTool className="w-8 h-8 text-green-400" />
                    </div>
                    <h3 className="text-xl font-semibold text-white mb-2">No journal entries yet</h3>
                    <p className="text-gray-400 mb-6">Begin your spiritual journey with daily reflections</p>
                    <Button 
                      onClick={() => setIsDialogOpen(true)}
                      className="bg-gradient-to-r from-green-500 to-teal-500 hover:from-green-600 hover:to-teal-600 text-white"
                    >
                      <Plus className="h-4 w-4 mr-2" />
                      Start Journaling
                    </Button>
                  </div>
                ) : (
                  journalNotes.map((note) => (
                    <Card key={note.id} className="bg-gradient-to-br from-green-900/30 to-teal-900/30 border-green-700/50 hover:border-green-500/70 transition-all duration-300 hover:scale-105">
                      <CardContent className="p-6">
                        <div className="flex items-start justify-between mb-3">
                          <h3 className="font-semibold text-white text-lg">{note.title}</h3>
                          <DropdownMenu>
                            <DropdownMenuTrigger asChild>
                              <Button variant="ghost" size="sm" className="text-gray-400 hover:text-white">
                                <MoreHorizontal className="h-4 w-4" />
                              </Button>
                            </DropdownMenuTrigger>
                            <DropdownMenuContent className="bg-[var(--scholar-dark)] border-gray-700">
                              <DropdownMenuItem 
                                onClick={() => { setEditingNote(note); setIsDialogOpen(true); }}
                                className="text-gray-300 hover:text-white"
                              >
                                <Edit className="h-4 w-4 mr-2" />
                                Edit
                              </DropdownMenuItem>
                              <DropdownMenuItem 
                                onClick={() => deleteNoteMutation.mutate(note.id)}
                                className="text-red-400 hover:text-red-300"
                              >
                                <Trash2 className="h-4 w-4 mr-2" />
                                Delete
                              </DropdownMenuItem>
                            </DropdownMenuContent>
                          </DropdownMenu>
                        </div>
                        <p className="text-gray-300 text-sm mb-4 line-clamp-3">{note.content}</p>
                        <div className="flex items-center justify-between">
                          <Badge variant="secondary" className="text-xs bg-green-500/20 text-green-300">
                            Journal Entry
                          </Badge>
                          <span className="text-xs text-gray-500">
                            {new Date(note.createdAt).toLocaleDateString()}
                          </span>
                        </div>
                      </CardContent>
                    </Card>
                  ))
                )}
              </div>
            </section>
          )}

          {/* Sermon Workspace */}
          {activeTab === 'sermon' && <SermonWorkspace />}
        </div>
      </div>
  );
};
            <TabsList className="grid w-full grid-cols-3 bg-[var(--scholar-darker)] h-12 md:h-10">
              <TabsTrigger value="notes" className="data-[state=active]:bg-[var(--scholar-gold)] data-[state=active]:text-black flex-col md:flex-row px-2 md:px-4 text-xs md:text-sm">
                <FileText className="h-4 w-4 md:mr-2" />
                <span className="mt-1 md:mt-0">Study Notes</span>
              </TabsTrigger>
              <TabsTrigger value="journal" className="data-[state=active]:bg-[var(--scholar-gold)] data-[state=active]:text-black flex-col md:flex-row px-2 md:px-4 text-xs md:text-sm">
                <PenTool className="h-4 w-4 md:mr-2" />
                <span className="mt-1 md:mt-0">Daily Journal</span>
              </TabsTrigger>
              <TabsTrigger value="sermon" className="data-[state=active]:bg-[var(--scholar-gold)] data-[state=active]:text-black flex-col md:flex-row px-2 md:px-4 text-xs md:text-sm relative">
                <MessageSquareText className="h-4 w-4 md:mr-2" />
                <span className="mt-1 md:mt-0 text-center font-semibold">Sermon Workspace</span>
              </TabsTrigger>
            </TabsList>

            {/* Study Notes Tab */}
            <TabsContent value="notes" className="mt-6">
              {renderNotesSection(manualNotes, "Personal Study Notes", "Create notes for your biblical studies")}
            </TabsContent>

            {/* Journal Tab */}
            <TabsContent value="journal" className="mt-6">
              {renderNotesSection(journalNotes, "Journal Entries", "Record your daily spiritual insights")}
            </TabsContent>

            {/* Sermon Workspace Tab */}
            <TabsContent value="sermon" className="mt-6">
              <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                {/* Main Editor */}
                <div className="lg:col-span-2 space-y-4">
                  <Card className="bg-[var(--scholar-darker)] border-gray-700">
                    <CardHeader>
                      <CardTitle className="text-white flex items-center">
                        <MessageSquareText className="h-5 w-5 mr-2" />
                        Sermon Editor
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <Input
                          placeholder="Sermon Title"
                          value={sermonTitle}
                          onChange={(e) => setSermonTitle(e.target.value)}
                          className="bg-[var(--scholar-dark)] border-gray-600 text-white"
                        />
                        <Input
                          placeholder="Scripture Reference"
                          value={sermonScripture}
                          onChange={(e) => setSermonScripture(e.target.value)}
                          className="bg-[var(--scholar-dark)] border-gray-600 text-white"
                        />
                      </div>
                      <Input
                        placeholder="Theme/Topic"
                        value={sermonTheme}
                        onChange={(e) => setSermonTheme(e.target.value)}
                        className="bg-[var(--scholar-dark)] border-gray-600 text-white"
                      />
                      <div className="relative">
                        <Textarea
                          ref={sermonTextareaRef}
                          placeholder="Write your sermon here..."
                          value={sermonContent}
                          onChange={(e) => setSermonContent(e.target.value)}
                          className="bg-[var(--scholar-dark)] border-gray-600 text-white min-h-[400px] font-mono text-sm leading-relaxed"
                        />
                        {isEnhancing && (
                          <div className="absolute inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center">
                            <div className="bg-[var(--scholar-dark)] border border-[var(--scholar-gold)] rounded-lg p-4 flex items-center space-x-3">
                              <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-[var(--scholar-gold)]"></div>
                              <span className="text-white font-medium">{enhancingAction}...</span>
                            </div>
                          </div>
                        )}
                      </div>
                      
                      {/* AI Enhancement Buttons */}
                      <div className="flex flex-wrap gap-2 pt-2 border-t border-gray-600">
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => handleEnhancement("expand", "Expanding Point")}
                          disabled={isEnhancing}
                          className="border-gray-600 text-gray-300 hover:bg-[var(--scholar-gold)]/10 hover:border-[var(--scholar-gold)] hover:text-[var(--scholar-gold)]"
                        >
                          <Lightbulb className="h-4 w-4 mr-1" />
                          Expand Point
                        </Button>
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => handleEnhancement("rewrite", "Rewriting Clearly")}
                          disabled={isEnhancing}
                          className="border-gray-600 text-gray-300 hover:bg-[var(--scholar-gold)]/10 hover:border-[var(--scholar-gold)] hover:text-[var(--scholar-gold)]"
                        >
                          <Edit className="h-4 w-4 mr-1" />
                          Rewrite Clearly
                        </Button>
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => handleEnhancement("verse", "Adding Supporting Verse")}
                          disabled={isEnhancing}
                          className="border-gray-600 text-gray-300 hover:bg-[var(--scholar-gold)]/10 hover:border-[var(--scholar-gold)] hover:text-[var(--scholar-gold)]"
                        >
                          <BookOpen className="h-4 w-4 mr-1" />
                          Add Verse
                        </Button>
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => handleEnhancement("illustration", "Adding Illustration")}
                          disabled={isEnhancing}
                          className="border-gray-600 text-gray-300 hover:bg-[var(--scholar-gold)]/10 hover:border-[var(--scholar-gold)] hover:text-[var(--scholar-gold)]"
                        >
                          <Quote className="h-4 w-4 mr-1" />
                          Add Illustration
                        </Button>
                        {previousContent && (
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={undoLastChange}
                            className="border-orange-600 text-orange-400 hover:bg-orange-600/10 hover:border-orange-500"
                          >
                            <RotateCcw className="h-4 w-4 mr-1" />
                            Undo
                          </Button>
                        )}
                      </div>

                      {/* Action Buttons */}
                      <div className="flex flex-wrap gap-2 pt-4 border-t border-gray-600">
                        <Button
                          onClick={() => copyToClipboard(sermonContent)}
                          variant="outline"
                          className="border-gray-600 text-gray-300 hover:bg-[var(--scholar-gold)]/10 hover:border-[var(--scholar-gold)] hover:text-[var(--scholar-gold)]"
                        >
                          <Copy className="h-4 w-4 mr-2" />
                          Copy Content
                        </Button>
                        <Button
                          onClick={generateSermonDocument}
                          variant="outline"
                          className="border-gray-600 text-gray-300 hover:bg-[var(--scholar-gold)]/10 hover:border-[var(--scholar-gold)] hover:text-[var(--scholar-gold)]"
                        >
                          <Download className="h-4 w-4 mr-2" />
                          Download
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                </div>

                {/* Sidebar Tools */}
                <div className="space-y-4">
                  {/* Writing Mode */}
                  <Card className="bg-[var(--scholar-darker)] border-gray-700">
                    <CardHeader>
                      <CardTitle className="text-white text-sm">Writing Mode</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-2">
                        {[
                          { value: "outline", label: "Outline", desc: "Structured points" },
                          { value: "manuscript", label: "Full Manuscript", desc: "Complete text" },
                          { value: "bullets", label: "Bullets", desc: "Key points only" }
                        ].map((mode) => (
                          <Button
                            key={mode.value}
                            size="sm"
                            variant={writingMode === mode.value ? "default" : "outline"}
                            onClick={() => setWritingMode(mode.value)}
                            className={`w-full justify-start text-left ${
                              writingMode === mode.value 
                                ? "bg-[var(--scholar-gold)] text-black" 
                                : "border-gray-600 text-gray-300 hover:bg-[var(--scholar-gold)]/10"
                            }`}
                          >
                            <div>
                              <div className="font-medium">{mode.label}</div>
                              <div className="text-xs opacity-75">{mode.desc}</div>
                            </div>
                          </Button>
                        ))}
                      </div>
                    </CardContent>
                  </Card>

                  {/* Voice Style */}
                  <Card className="bg-[var(--scholar-darker)] border-gray-700">
                    <CardHeader>
                      <CardTitle className="text-white text-sm">Preaching Style</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-2">
                        {[
                          { value: "prophetic", label: "Prophetic", desc: "Bold, declarative" },
                          { value: "teaching", label: "Teaching", desc: "Educational, clear" },
                          { value: "evangelistic", label: "Evangelistic", desc: "Compelling, urgent" },
                          { value: "youth", label: "Youth/Modern", desc: "Relatable, current" },
                          { value: "devotional", label: "Devotional", desc: "Gentle, reflective" }
                        ].map((style) => (
                          <Button
                            key={style.value}
                            size="sm"
                            variant={voiceStyle === style.value ? "default" : "outline"}
                            onClick={() => setVoiceStyle(style.value)}
                            className={`w-full justify-start text-left ${
                              voiceStyle === style.value 
                                ? "bg-[var(--scholar-gold)] text-black" 
                                : "border-gray-600 text-gray-300 hover:bg-[var(--scholar-gold)]/10"
                            }`}
                          >
                            <div>
                              <div className="font-medium">{style.label}</div>
                              <div className="text-xs opacity-75">{style.desc}</div>
                            </div>
                          </Button>
                        ))}
                      </div>
                    </CardContent>
                  </Card>
                </div>
              </div>
            </TabsContent>
          </Tabs>
        </div>
      </div>
    </div>
  );
}