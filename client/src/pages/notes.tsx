import { useState, useRef } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import { queryClient } from "@/lib/queryClient";
import { apiRequest } from "@/lib/queryClient";
import Sidebar from "@/components/sidebar";
import MobileTabBar from "@/components/mobile-tab-bar";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Badge } from "@/components/ui/badge";
import { Skeleton } from "@/components/ui/skeleton";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { useToast } from "@/hooks/use-toast";
import { Plus, Search, FileText, Edit, Trash2, PenTool, BookOpen, Mic, Lightbulb, Quote, Volume2, Wand2, RotateCcw, Download, Copy, MessageSquareText, NotebookPen, HelpCircle } from "lucide-react";
import type { Note } from "@shared/schema";
import PageHelp from "@/components/page-help";

export default function Notes() {
  const [searchQuery, setSearchQuery] = useState("");
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [editingNote, setEditingNote] = useState<Note | null>(null);
  const [activeTab, setActiveTab] = useState("notes");
  const { toast } = useToast();

  // Helper functions for copy and download
  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
      toast({ title: "Copied to clipboard" });
    } catch (error) {
      toast({ title: "Failed to copy", variant: "destructive" });
    }
  };

  const downloadAsDocument = (content: string, filename: string) => {
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    toast({ title: "Document downloaded" });
  };

  const generateSermonDocument = () => {
    const timestamp = new Date().toLocaleDateString();
    const content = `${sermonTitle || 'Untitled Sermon'}
${sermonTitle ? '=' : ''}${'='.repeat(sermonTitle.length)}

Date: ${timestamp}
Scripture: ${sermonScripture}
Theme: ${sermonTheme}
Writing Mode: ${sermonMode.charAt(0).toUpperCase() + sermonMode.slice(1)}
Voice Style: ${voiceStyle.charAt(0).toUpperCase() + voiceStyle.slice(1)}

SERMON CONTENT:
${'-'.repeat(50)}

${sermonBody}

PREACHING OUTLINE:
${'-'.repeat(50)}

Title: ${sermonOutline.title}
Text: ${sermonOutline.text}
Theme: ${sermonOutline.theme}

Point 1: ${sermonOutline.point1}
Point 2: ${sermonOutline.point2}
Point 3: ${sermonOutline.point3}

Call to Action: ${sermonOutline.callToAction}
Closing Verse: ${sermonOutline.closingVerse}

---
Generated by The Scholar - Biblical Study Assistant
`;
    return content;
  };

  // Sermon Workspace State
  const [sermonTitle, setSermonTitle] = useState("");
  const [sermonScripture, setSermonScripture] = useState("");
  const [sermonTheme, setSermonTheme] = useState("");
  const [sermonBody, setSermonBody] = useState("");
  const [sermonMode, setSermonMode] = useState<"outline" | "manuscript" | "bullets">("outline");
  const [voiceStyle, setVoiceStyle] = useState<"prophetic" | "teaching" | "evangelistic" | "youth" | "devotional">("prophetic");
  const [loadingButton, setLoadingButton] = useState<string | null>(null);
  const [sermonOutline, setSermonOutline] = useState({
    title: "",
    text: "",
    theme: "",
    point1: "",
    point2: "",
    point3: "",
    callToAction: "",
    closingVerse: ""
  });

  const { data: notes, isLoading } = useQuery<Note[]>({
    queryKey: ["/api/notes"],
  });

  const createMutation = useMutation({
    mutationFn: async (data: { title: string; content: string; scripture?: string; tags?: string[] }) => {
      return apiRequest("POST", "/api/notes", data);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/notes"] });
      queryClient.invalidateQueries({ queryKey: ["/api/profile/stats"] });
      toast({ title: "Note created successfully" });
      setIsDialogOpen(false);
    },
    onError: (error) => {
      console.error("Note creation error:", error);
      toast({ title: "Failed to create note", variant: "destructive" });
    },
  });

  const updateMutation = useMutation({
    mutationFn: async ({ id, data }: { id: number; data: Partial<Note> }) => {
      return apiRequest("PUT", `/api/notes/${id}`, data);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/notes"] });
      queryClient.invalidateQueries({ queryKey: ["/api/profile/stats"] });
      toast({ title: "Note updated successfully" });
      setEditingNote(null);
      setIsDialogOpen(false);
    },
    onError: () => {
      toast({ title: "Failed to update note", variant: "destructive" });
    },
  });

  const deleteMutation = useMutation({
    mutationFn: async (id: number) => {
      return apiRequest("DELETE", `/api/notes/${id}`);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/notes"] });
      queryClient.invalidateQueries({ queryKey: ["/api/profile/stats"] });
      toast({ title: "Note deleted successfully" });
    },
    onError: () => {
      toast({ title: "Failed to delete note", variant: "destructive" });
    },
  });

  // AI Helper Functions for Sermon Workspace
  const [selectedText, setSelectedText] = useState("");
  const [selectionStart, setSelectionStart] = useState(0);
  const [selectionEnd, setSelectionEnd] = useState(0);
  const [previousSermonBody, setPreviousSermonBody] = useState("");
  const textareaRef = useRef<HTMLTextAreaElement>(null);

  const handleTextSelection = () => {
    const textarea = textareaRef.current;
    if (textarea) {
      const start = textarea.selectionStart;
      const end = textarea.selectionEnd;
      const selected = textarea.value.substring(start, end);
      
      setSelectedText(selected);
      setSelectionStart(start);
      setSelectionEnd(end);
    }
  };

  const aiEnhanceMutation = useMutation({
    mutationFn: async ({ action, text, style }: { action: string; text: string; style?: string }) => {
      setLoadingButton(action);
      const response = await apiRequest("POST", "/api/chat/enhance", { action, text, style });
      const data = await response.json();
      return data;
    },
    onSuccess: (data: any, variables) => {
      const { action } = variables;
      
      // Save current state for undo functionality
      setPreviousSermonBody(sermonBody);
      
      // Get the enhanced content from API response
      const enhancedContent = data.message || data.content || "";
      
      if (!enhancedContent) {
        toast({ title: "No enhanced content received", variant: "destructive" });
        return;
      }
      
      // Format the Scholar enhancement with clear attribution
      const scholarAttribution = "\n\n--- Enhanced by The Scholar ---\n";
      const formattedContent = scholarAttribution + enhancedContent + "\n--- End Enhancement ---\n";
      
      if (action === "expand") {
        // Replace selected text with expanded version
        if (selectedText) {
          const newText = sermonBody.substring(0, selectionStart) + 
                          formattedContent + 
                          sermonBody.substring(selectionEnd);
          setSermonBody(newText);
        } else {
          setSermonBody(prev => prev + formattedContent);
        }
      } else if (action === "rewrite") {
        // Replace selected text with rewritten version
        if (selectedText) {
          const newText = sermonBody.substring(0, selectionStart) + 
                          formattedContent + 
                          sermonBody.substring(selectionEnd);
          setSermonBody(newText);
        } else {
          setSermonBody(formattedContent);
        }
      } else if (action === "add_verse") {
        // Add verse after selected text or at end
        if (selectedText) {
          const newText = sermonBody.substring(0, selectionEnd) + 
                          formattedContent +
                          sermonBody.substring(selectionEnd);
          setSermonBody(newText);
        } else {
          setSermonBody(prev => prev + formattedContent);
        }
      } else if (action === "add_illustration") {
        // Add illustration after selected text or at end
        if (selectedText) {
          const newText = sermonBody.substring(0, selectionEnd) + 
                          formattedContent +
                          sermonBody.substring(selectionEnd);
          setSermonBody(newText);
        } else {
          setSermonBody(prev => prev + formattedContent);
        }
      } else if (action === "convert_outline") {
        const outline = data.outline || {};
        setSermonOutline({
          title: outline.title || sermonTitle,
          text: outline.text || sermonScripture,
          theme: outline.theme || sermonTheme,
          point1: outline.point1 || "",
          point2: outline.point2 || "",
          point3: outline.point3 || "",
          callToAction: outline.callToAction || "",
          closingVerse: outline.closingVerse || ""
        });
      } else if (action === "style_rewrite") {
        setSermonBody(formattedContent);
      } else if (action.startsWith("format_")) {
        // For format transformations, replace the entire sermon body
        setSermonBody(enhancedContent);
      }
      
      // Clear selection after processing (only for text-based enhancements)
      if (!action.startsWith("format_")) {
        setSelectedText("");
        setSelectionStart(0);
        setSelectionEnd(0);
      }
      
      toast({ 
        title: action.startsWith("format_") ? "Sermon format transformed by The Scholar" : "Content enhanced by The Scholar" 
      });
    },
    onError: () => {
      toast({ title: "Failed to enhance content", variant: "destructive" });
    },
    onSettled: () => {
      setLoadingButton(null);
    },
  });

  const handleAIEnhancement = (action: string) => {
    if (!selectedText || selectedText.trim().length === 0) {
      toast({ 
        title: "Please highlight text first", 
        description: "Select the text you want The Scholar to enhance",
        variant: "destructive" 
      });
      return;
    }
    
    aiEnhanceMutation.mutate({ action, text: selectedText });
  };

  const handleFormatTransform = (newMode: "outline" | "manuscript" | "bullets") => {
    if (!sermonBody || sermonBody.trim().length === 0) {
      toast({ 
        title: "No content to transform", 
        description: "Write some sermon content first before changing the format",
        variant: "destructive" 
      });
      return;
    }
    
    // Save current state for undo functionality
    setPreviousSermonBody(sermonBody);
    setSermonMode(newMode);
    aiEnhanceMutation.mutate({ 
      action: `format_${newMode}`, 
      text: sermonBody 
    });
  };

  const handleUndo = () => {
    if (previousSermonBody !== undefined) {
      setSermonBody(previousSermonBody);
      setPreviousSermonBody("");
      toast({ title: "Changes reverted successfully" });
    }
  };



  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const formData = new FormData(e.currentTarget);
    const tagsString = formData.get("tags") as string;
    const tags = tagsString ? tagsString.split(",").map(tag => tag.trim()).filter(Boolean) : [];
    
    const data = {
      title: formData.get("title") as string,
      content: formData.get("content") as string,
      scripture: formData.get("scripture") as string || undefined,
      tags: tags.length > 0 ? tags : undefined,
    };

    if (editingNote) {
      updateMutation.mutate({ id: editingNote.id, data });
    } else {
      createMutation.mutate(data);
    }
  };

  const filteredNotes = notes?.filter((note) => {
    const searchLower = searchQuery.toLowerCase();
    const noteContent = typeof note.content === 'string' ? note.content : JSON.stringify(note.content);
    return (
      note.title.toLowerCase().includes(searchLower) ||
      noteContent.toLowerCase().includes(searchLower) ||
      note.scripture?.toLowerCase().includes(searchLower) ||
      note.tags?.some(tag => tag.toLowerCase().includes(searchLower))
    );
  });

  // Organize notes by source type
  const studyToolNotes = filteredNotes?.filter(note => 
    note.tags?.some(tag => 
      ['greek-hebrew', 'cross-references', 'commentary', 'cultural-context', 'study-tool'].includes(tag.toLowerCase())
    )
  );
  
  const manualNotes = filteredNotes?.filter(note => 
    !note.tags?.some(tag => 
      ['greek-hebrew', 'cross-references', 'commentary', 'cultural-context', 'study-tool'].includes(tag.toLowerCase())
    )
  );

  // Journal notes (daily reflections)
  const journalNotes = filteredNotes?.filter(note => 
    note.tags?.some(tag => 
      ['journal', 'reflection', 'prayer', 'daily'].includes(tag.toLowerCase())
    )
  );



  // Render Notes Section with AI Enhancement
  const renderNotesSection = (notesList: Note[] | undefined, title: string, emptyMessage: string) => {
    if (isLoading) {
      return (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {Array.from({ length: 6 }).map((_, i) => (
            <Card key={i} className="bg-[var(--scholar-dark)] border-gray-700">
              <CardHeader>
                <Skeleton className="h-6 w-3/4 bg-gray-600" />
                <Skeleton className="h-4 w-1/2 bg-gray-600" />
              </CardHeader>
              <CardContent>
                <Skeleton className="h-20 w-full bg-gray-600" />
              </CardContent>
            </Card>
          ))}
        </div>
      );
    }

    if (!notesList || notesList.length === 0) {
      return (
        <div className="text-center py-12">
          <FileText className="h-16 w-16 text-gray-600 mx-auto mb-4" />
          <h3 className="text-xl font-semibold text-gray-400 mb-2">
            {searchQuery ? "No notes found" : `No ${title.toLowerCase()} yet`}
          </h3>
          <p className="text-gray-500 mb-6">
            {searchQuery ? "Try adjusting your search criteria" : emptyMessage}
          </p>
          {!searchQuery && (
            <Button 
              className="bg-[var(--scholar-gold)] text-black hover:bg-yellow-500"
              onClick={() => setIsDialogOpen(true)}
            >
              <Plus className="h-4 w-4 mr-2" />
              Create Your First Note
            </Button>
          )}
        </div>
      );
    }

    return (
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {notesList.map((note) => (
          <Card key={note.id} className="bg-[var(--scholar-dark)] border-gray-700 hover:border-gray-600 transition-colors">
            <CardHeader>
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  <CardTitle className="text-white text-lg mb-2">{note.title}</CardTitle>
                  {note.scripture && (
                    <p className="text-[var(--scholar-gold)] text-sm mb-2">{note.scripture}</p>
                  )}
                  {note.tags && note.tags.length > 0 && (
                    <div className="flex flex-wrap gap-1 mb-2">
                      {note.tags.map((tag, index) => (
                        <Badge key={index} variant="secondary" className="bg-[var(--scholar-darker)] text-gray-300 text-xs">
                          {tag}
                        </Badge>
                      ))}
                    </div>
                  )}
                </div>
                <div className="flex space-x-1">
                  <Button
                    size="sm"
                    variant="ghost"
                    onClick={() => {
                      setEditingNote(note);
                      setIsDialogOpen(true);
                    }}
                    className="text-gray-400 hover:text-white"
                  >
                    <Edit className="h-4 w-4" />
                  </Button>
                  <Button
                    size="sm"
                    variant="ghost"
                    onClick={() => deleteMutation.mutate(note.id)}
                    className="text-gray-400 hover:text-red-400"
                  >
                    <Trash2 className="h-4 w-4" />
                  </Button>
                </div>
              </div>
            </CardHeader>
            <CardContent>
              <p className="text-gray-300 text-sm line-clamp-4">
                {typeof note.content === 'string' ? note.content : JSON.stringify(note.content)}
              </p>
              <div className="mt-4 text-xs text-gray-500">
                {new Date(note.createdAt).toLocaleDateString()}
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    );
  };

  // Render Journal Section
  const renderJournalSection = () => {
    return (
      <div className="space-y-6">
        {/* Quick Journal Entry */}
        <Card className="bg-[var(--scholar-dark)] border-gray-700">
          <CardHeader>
            <CardTitle className="text-[var(--scholar-gold)] flex items-center">
              <PenTool className="h-5 w-5 mr-2" />
              Today's Reflection
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <Dialog>
              <DialogTrigger asChild>
                <Button className="w-full bg-[var(--scholar-gold)] text-black hover:bg-yellow-500">
                  <Plus className="h-4 w-4 mr-2" />
                  Add Journal Entry
                </Button>
              </DialogTrigger>
              <DialogContent className="bg-[var(--scholar-dark)] border-gray-700 text-white max-w-2xl">
                <DialogHeader>
                  <DialogTitle>Daily Journal Entry</DialogTitle>
                </DialogHeader>
                <form onSubmit={(e) => {
                  e.preventDefault();
                  const formData = new FormData(e.currentTarget);
                  const data = {
                    title: formData.get("title") as string,
                    content: formData.get("content") as string,
                    tags: ["journal", "daily", "reflection"]
                  };
                  createMutation.mutate(data);
                }} className="space-y-4">
                  <Input
                    name="title"
                    placeholder="What's on your heart today?"
                    required
                    className="bg-[var(--scholar-darker)] border-gray-600 text-white"
                  />
                  <Textarea
                    name="content"
                    placeholder="Write about what God is showing you, a prayer, or a moment that impacted you..."
                    required
                    rows={8}
                    className="bg-[var(--scholar-darker)] border-gray-600 text-white"
                  />
                  <Button 
                    type="submit" 
                    className="bg-[var(--scholar-gold)] text-black hover:bg-yellow-500"
                    disabled={createMutation.isPending}
                  >
                    Save Reflection
                  </Button>
                </form>
              </DialogContent>
            </Dialog>
          </CardContent>
        </Card>

        {/* Journal Entries */}
        {renderNotesSection(journalNotes, "Journal Entries", "Start recording your daily walk with God")}
      </div>
    );
  };

  return (
    <div className="flex h-screen overflow-hidden">
      <Sidebar />
      
      <div className="flex-1 flex flex-col overflow-hidden">
        {/* Top Bar */}
        <div className="bg-[var(--scholar-dark)] border-b border-gray-800 px-4 md:px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <h2 className="text-lg md:text-xl font-semibold text-white">Notes</h2>
              <PageHelp 
                pageName="Notes"
                helpContent={{
                  title: "Notes & Sermon Workspace Help",
                  description: "Your comprehensive workspace for biblical study notes, daily journaling, and sermon preparation with AI enhancement tools.",
                  features: [
                    {
                      title: "Study Notes",
                      description: "Create and organize your biblical study notes with scripture references and tags",
                      tips: [
                        "Use scripture references to link notes to specific Bible passages",
                        "Add tags like 'prayer', 'leadership', or 'theology' to organize your notes",
                        "Search across all your notes using the search bar",
                        "Notes from Bible study tools are automatically saved here"
                      ]
                    },
                    {
                      title: "Daily Journal",
                      description: "Record your personal reflections, prayers, and spiritual insights",
                      tips: [
                        "Use tags like 'journal', 'reflection', or 'prayer' for easy filtering",
                        "Write about your daily walk with God and spiritual growth",
                        "Reference scripture that speaks to you each day"
                      ]
                    },
                    {
                      title: "Sermon Workspace",
                      description: "Professional sermon preparation with AI enhancement and multiple writing modes",
                      tips: [
                        "Choose between Outline, Full Manuscript, or Bullet Points mode",
                        "Select a preaching style: Prophetic, Teaching, Evangelistic, Youth, or Devotional",
                        "Highlight text and use AI tools: Expand Point, Rewrite Clearly, Add Verse, Add Illustration",
                        "Use the Preaching Outline Builder for structured sermon development",
                        "Copy individual sections or download complete sermon documents"
                      ]
                    }
                  ]
                }}
              />
            </div>
            <div className="flex items-center space-x-2 md:space-x-4">
              <div className="relative">
                <Input
                  type="text"
                  placeholder="Search..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="bg-[var(--scholar-darker)] border-gray-700 text-white pl-10 w-32 sm:w-48 md:w-64 focus:border-[var(--scholar-gold)]"
                />
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
              </div>
              <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
                <DialogTrigger asChild>
                  <Button 
                    className="bg-[var(--scholar-gold)] text-black hover:bg-yellow-500 font-medium px-3 md:px-4"
                    onClick={() => setEditingNote(null)}
                  >
                    <Plus className="h-4 w-4 md:mr-2" />
                    <span className="hidden md:inline">New Note</span>
                  </Button>
                </DialogTrigger>
                <DialogContent className="bg-[var(--scholar-dark)] border-gray-700 text-white max-w-2xl">
                  <DialogHeader>
                    <DialogTitle>{editingNote ? "Edit Note" : "Create New Note"}</DialogTitle>
                  </DialogHeader>
                  <form onSubmit={handleSubmit} className="space-y-4">
                    <Input
                      name="title"
                      placeholder="Note title"
                      required
                      defaultValue={editingNote?.title || ""}
                      className="bg-[var(--scholar-darker)] border-gray-600 text-white"
                    />
                    <Input
                      name="scripture"
                      placeholder="Scripture reference (optional)"
                      defaultValue={editingNote?.scripture || ""}
                      className="bg-[var(--scholar-darker)] border-gray-600 text-white"
                    />
                    <Input
                      name="tags"
                      placeholder="Tags (comma separated)"
                      defaultValue={editingNote?.tags?.join(", ") || ""}
                      className="bg-[var(--scholar-darker)] border-gray-600 text-white"
                    />
                    <Textarea
                      name="content"
                      placeholder="Your notes..."
                      required
                      rows={8}
                      defaultValue={editingNote?.content || ""}
                      className="bg-[var(--scholar-darker)] border-gray-600 text-white"
                    />
                    <Button 
                      type="submit" 
                      className="bg-[var(--scholar-gold)] text-black hover:bg-yellow-500"
                      disabled={createMutation.isPending || updateMutation.isPending}
                    >
                      {editingNote ? "Update Note" : "Create Note"}
                    </Button>
                  </form>
                </DialogContent>
              </Dialog>
            </div>
          </div>
        </div>

        <div className="flex-1 overflow-y-auto p-6 pb-20 md:pb-6">
          <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
            <TabsList className="grid w-full grid-cols-3 bg-[var(--scholar-darker)]">
              <TabsTrigger value="notes" className="data-[state=active]:bg-[var(--scholar-gold)] data-[state=active]:text-black">
                <FileText className="h-4 w-4 mr-2" />
                Study Notes
              </TabsTrigger>
              <TabsTrigger value="journal" className="data-[state=active]:bg-[var(--scholar-gold)] data-[state=active]:text-black">
                <PenTool className="h-4 w-4 mr-2" />
                Daily Journal
              </TabsTrigger>
              <TabsTrigger value="sermon" className="data-[state=active]:bg-[var(--scholar-gold)] data-[state=active]:text-black">
                <MessageSquareText className="h-4 w-4 mr-2" />
                Sermon Workspace
              </TabsTrigger>
            </TabsList>

            {/* Study Notes Tab */}
            <TabsContent value="notes" className="mt-6">
              {renderNotesSection(manualNotes, "Personal Study Notes", "Create notes for your biblical studies")}
            </TabsContent>

            {/* Daily Journal Tab */}
            <TabsContent value="journal" className="mt-6">
              {renderJournalSection()}
            </TabsContent>

            {/* Sermon Workspace Tab */}
            <TabsContent value="sermon" className="mt-6">
              <div className="flex flex-col lg:grid lg:grid-cols-3 gap-6">
                {/* Main Sermon Editor */}
                <div className="lg:col-span-2 space-y-6 order-2 lg:order-1">
                  {/* Sermon Header */}
                  <Card className="bg-[var(--scholar-dark)] border-gray-700">
                    <CardHeader>
                      <CardTitle className="text-[var(--scholar-gold)] flex items-center">
                        <MessageSquareText className="h-5 w-5 mr-2" />
                        Sermon Workspace
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      {/* Sermon Title */}
                      <div>
                        <label className="text-sm font-medium text-gray-300 mb-2 block">
                          Sermon Title
                        </label>
                        <Input
                          value={sermonTitle}
                          onChange={(e) => setSermonTitle(e.target.value)}
                          placeholder="Enter your sermon title..."
                          className="bg-[var(--scholar-darker)] border-gray-600 text-white text-lg font-semibold"
                        />
                      </div>

                      {/* Main Scripture */}
                      <div>
                        <label className="text-sm font-medium text-gray-300 mb-2 block">
                          Main Scripture(s)
                        </label>
                        <Input
                          value={sermonScripture}
                          onChange={(e) => setSermonScripture(e.target.value)}
                          placeholder="e.g., Romans 8:28-30, John 3:16"
                          className="bg-[var(--scholar-darker)] border-gray-600 text-white"
                        />
                      </div>

                      {/* Theme / Big Idea */}
                      <div>
                        <label className="text-sm font-medium text-gray-300 mb-2 block">
                          Theme / Big Idea
                        </label>
                        <Input
                          value={sermonTheme}
                          onChange={(e) => setSermonTheme(e.target.value)}
                          placeholder="What's the central message God wants to communicate?"
                          className="bg-[var(--scholar-darker)] border-gray-600 text-white"
                        />
                      </div>


                    </CardContent>
                  </Card>

                  {/* Sermon Body Editor */}
                  <Card className="bg-[var(--scholar-dark)] border-gray-700">
                    <CardHeader>
                      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3">
                        <CardTitle className="text-white">Sermon Body</CardTitle>
                        <div className="flex flex-wrap gap-2">
                          <DropdownMenu>
                            <DropdownMenuTrigger asChild>
                              <Button
                                size="sm"
                                variant="ghost"
                                className="text-[var(--scholar-gold)] hover:bg-gray-700 flex-shrink-0"
                              >
                                <NotebookPen className="h-3 w-3 mr-1" />
                                <span className="hidden sm:inline">Insert Note</span>
                                <span className="sm:hidden">Note</span>
                              </Button>
                            </DropdownMenuTrigger>
                            <DropdownMenuContent className="w-80 max-h-64 overflow-y-auto bg-[var(--scholar-dark)] border-gray-600">
                              {manualNotes && manualNotes.length > 0 ? (
                                manualNotes.map((note) => (
                                  <DropdownMenuItem
                                    key={note.id}
                                    onClick={() => {
                                      const noteContent = `\n\n--- ${note.title} ---\n${note.content}${note.scripture ? `\n(${note.scripture})` : ''}\n`;
                                      setSermonBody(prev => prev + noteContent);
                                    }}
                                    className="text-white hover:bg-gray-700 p-3 cursor-pointer border-b border-gray-600 last:border-b-0"
                                  >
                                    <div className="w-full">
                                      <div className="font-medium text-[var(--scholar-gold)] mb-1">{note.title}</div>
                                      {note.scripture && (
                                        <div className="text-xs text-gray-400 mb-1">{note.scripture}</div>
                                      )}
                                      <div className="text-sm text-gray-300 line-clamp-2">
                                        {note.content.substring(0, 100)}...
                                      </div>
                                    </div>
                                  </DropdownMenuItem>
                                ))
                              ) : (
                                <DropdownMenuItem disabled className="text-gray-400 p-3">
                                  No notes available. Create notes in the Study Notes tab first.
                                </DropdownMenuItem>
                              )}
                            </DropdownMenuContent>
                          </DropdownMenu>
                          {sermonBody && (
                            <>
                              <Button
                                onClick={() => copyToClipboard(sermonBody)}
                                size="sm"
                                variant="ghost"
                                className="text-[var(--scholar-gold)] hover:bg-gray-700 flex-shrink-0"
                              >
                                <Copy className="h-3 w-3 mr-1" />
                                <span className="hidden sm:inline">Copy Body</span>
                                <span className="sm:hidden">Copy</span>
                              </Button>
                              <Button
                                onClick={() => downloadAsDocument(sermonBody, `${sermonTitle || 'sermon-body'}-${new Date().toISOString().split('T')[0]}.txt`)}
                                size="sm"
                                variant="ghost"
                                className="text-[var(--scholar-gold)] hover:bg-gray-700 flex-shrink-0"
                              >
                                <Download className="h-3 w-3 mr-1" />
                                <span className="hidden sm:inline">Download</span>
                                <span className="sm:hidden">Save</span>
                              </Button>
                              {previousSermonBody && (
                                <Button
                                  onClick={handleUndo}
                                  size="sm"
                                  variant="ghost"
                                  className="text-red-400 hover:bg-red-900/20 flex-shrink-0"
                                >
                                  <RotateCcw className="h-3 w-3 mr-1" />
                                  <span className="hidden sm:inline">Undo Enhancement</span>
                                  <span className="sm:hidden">Undo</span>
                                </Button>
                              )}
                            </>
                          )}
                        </div>
                      </div>
                      
                      {/* Writing Mode Selector */}
                      <div className="mb-4">
                        <label className="text-sm font-medium text-gray-300 mb-2 block">
                          Transform to Writing Mode
                        </label>
                        <div className="grid grid-cols-3 gap-2 mb-4">
                          {[
                            { value: "outline", label: "Outline", icon: FileText },
                            { value: "manuscript", label: "Full Manuscript", icon: BookOpen },
                            { value: "bullets", label: "Bullets", icon: Quote }
                          ].map(({ value, label, icon: Icon }) => (
                            <div
                              key={value}
                              onClick={() => handleFormatTransform(value as any)}
                              className={`p-2 rounded-lg border cursor-pointer transition-all text-center ${
                                loadingButton === `format_${value}`
                                  ? "border-gray-600 text-gray-500 cursor-not-allowed"
                                  : sermonMode === value 
                                    ? "border-[var(--scholar-gold)] bg-[var(--scholar-gold)]/10 text-[var(--scholar-gold)]" 
                                    : "border-gray-600 text-gray-300 hover:border-gray-500 hover:bg-gray-700/50"
                              }`}
                            >
                              {loadingButton === `format_${value}` ? (
                                <div className="animate-spin h-4 w-4 mx-auto mb-1 border-2 border-gray-500 border-t-yellow-400 rounded-full"></div>
                              ) : (
                                <Icon className="h-4 w-4 mx-auto mb-1" />
                              )}
                              <div className="text-xs font-medium">
                                {loadingButton === `format_${value}` ? "Transforming..." : label}
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                      
                      {/* AI Enhancement Tools */}
                      <div className="grid grid-cols-2 gap-2 mb-4">
                        <div
                          onClick={() => loadingButton !== "expand" && handleAIEnhancement("expand")}
                          className={`p-2 rounded-lg border cursor-pointer transition-all text-center ${
                            loadingButton === "expand" 
                              ? "border-gray-600 text-gray-500 cursor-not-allowed" 
                              : "border-blue-500/50 bg-blue-500/10 text-blue-400 hover:border-blue-400 hover:bg-blue-500/20"
                          }`}
                        >
                          {loadingButton === "expand" ? (
                            <div className="animate-spin h-4 w-4 mx-auto mb-1 border-2 border-gray-500 border-t-blue-400 rounded-full"></div>
                          ) : (
                            <Lightbulb className="h-4 w-4 mx-auto mb-1" />
                          )}
                          <div className="text-xs font-medium">
                            {loadingButton === "expand" ? "Expanding..." : "Expand Point"}
                          </div>
                          {selectedText && loadingButton !== "expand" && <div className="text-xs text-blue-300 mt-1">({selectedText.length} chars)</div>}
                        </div>
                        
                        <div
                          onClick={() => loadingButton !== "rewrite" && handleAIEnhancement("rewrite")}
                          className={`p-2 rounded-lg border cursor-pointer transition-all text-center ${
                            loadingButton === "rewrite" 
                              ? "border-gray-600 text-gray-500 cursor-not-allowed" 
                              : "border-green-500/50 bg-green-500/10 text-green-400 hover:border-green-400 hover:bg-green-500/20"
                          }`}
                        >
                          {loadingButton === "rewrite" ? (
                            <div className="animate-spin h-4 w-4 mx-auto mb-1 border-2 border-gray-500 border-t-green-400 rounded-full"></div>
                          ) : (
                            <RotateCcw className="h-4 w-4 mx-auto mb-1" />
                          )}
                          <div className="text-xs font-medium">
                            {loadingButton === "rewrite" ? "Rewriting..." : "Rewrite Clearly"}
                          </div>
                          {selectedText && loadingButton !== "rewrite" && <div className="text-xs text-green-300 mt-1">({selectedText.length} chars)</div>}
                        </div>
                        
                        <div
                          onClick={() => loadingButton !== "add_verse" && handleAIEnhancement("add_verse")}
                          className={`p-2 rounded-lg border cursor-pointer transition-all text-center ${
                            loadingButton === "add_verse" 
                              ? "border-gray-600 text-gray-500 cursor-not-allowed" 
                              : "border-purple-500/50 bg-purple-500/10 text-purple-400 hover:border-purple-400 hover:bg-purple-500/20"
                          }`}
                        >
                          {loadingButton === "add_verse" ? (
                            <div className="animate-spin h-4 w-4 mx-auto mb-1 border-2 border-gray-500 border-t-purple-400 rounded-full"></div>
                          ) : (
                            <BookOpen className="h-4 w-4 mx-auto mb-1" />
                          )}
                          <div className="text-xs font-medium">
                            {loadingButton === "add_verse" ? "Finding Verse..." : "Add Verse"}
                          </div>
                          {selectedText && loadingButton !== "add_verse" && <div className="text-xs text-purple-300 mt-1">({selectedText.length} chars)</div>}
                        </div>
                        
                        <div
                          onClick={() => loadingButton !== "add_illustration" && handleAIEnhancement("add_illustration")}
                          className={`p-2 rounded-lg border cursor-pointer transition-all text-center ${
                            loadingButton === "add_illustration" 
                              ? "border-gray-600 text-gray-500 cursor-not-allowed" 
                              : "border-orange-500/50 bg-orange-500/10 text-orange-400 hover:border-orange-400 hover:bg-orange-500/20"
                          }`}
                        >
                          {loadingButton === "add_illustration" ? (
                            <div className="animate-spin h-4 w-4 mx-auto mb-1 border-2 border-gray-500 border-t-orange-400 rounded-full"></div>
                          ) : (
                            <Quote className="h-4 w-4 mx-auto mb-1" />
                          )}
                          <div className="text-xs font-medium">
                            {loadingButton === "add_illustration" ? "Creating Story..." : "Add Illustration"}
                          </div>
                          {selectedText && loadingButton !== "add_illustration" && <div className="text-xs text-orange-300 mt-1">({selectedText.length} chars)</div>}
                        </div>
                      </div>
                    </CardHeader>
                    <CardContent>
                      <Textarea
                        ref={textareaRef}
                        value={sermonBody}
                        onChange={(e) => setSermonBody(e.target.value)}
                        onSelect={handleTextSelection}
                        onMouseUp={handleTextSelection}
                        onKeyUp={handleTextSelection}
                        placeholder={`Write your sermon content here...

${sermonMode === 'outline' ? 'Use headers and bullet points for key ideas' : 
  sermonMode === 'manuscript' ? 'Write out your full sermon text' : 
  'Use bullet points for quick reference notes'}`}
                        rows={20}
                        className="bg-[var(--scholar-darker)] border-gray-600 text-white font-mono text-sm leading-relaxed"
                      />
                    </CardContent>
                  </Card>
                </div>

                {/* Mobile-First Sidebar */}
                <div className="space-y-6 order-1 lg:order-2">
                  {/* Voice & Style Selector */}
                  <Card className="bg-[var(--scholar-dark)] border-gray-700">
                    <CardHeader>
                      <CardTitle className="text-[var(--scholar-gold)] flex items-center">
                        <Volume2 className="h-5 w-5 mr-2" />
                        Voice & Style
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-3">
                      {[
                        { value: "prophetic", label: "Prophetic", desc: "Bold, Spirit-led, empowering, identity-focused" },
                        { value: "teaching", label: "Teaching", desc: "Deep theological exposition and exegesis" },
                        { value: "evangelistic", label: "Evangelistic", desc: "Focused on salvation and outreach" },
                        { value: "youth", label: "Youth/Modern", desc: "Contemporary, relatable language" },
                        { value: "devotional", label: "Devotional", desc: "Personal, intimate, reflective" }
                      ].map(({ value, label, desc }) => (
                        <div
                          key={value}
                          className={`p-3 rounded-lg border cursor-pointer transition-colors ${
                            voiceStyle === value 
                              ? "border-[var(--scholar-gold)] bg-[var(--scholar-gold)]/10" 
                              : "border-gray-600 hover:border-gray-500"
                          }`}
                          onClick={() => setVoiceStyle(value as any)}
                        >
                          <div className="font-medium text-white">{label}</div>
                          <div className="text-sm text-gray-400">{desc}</div>
                        </div>
                      ))}
                      <Button
                        onClick={() => aiEnhanceMutation.mutate({ 
                          action: "style_rewrite", 
                          text: sermonBody, 
                          style: voiceStyle 
                        })}
                        disabled={aiEnhanceMutation.isPending || !sermonBody}
                        className="w-full bg-[var(--scholar-gold)] text-black hover:bg-yellow-500"
                      >
                        <Wand2 className="h-4 w-4 mr-2" />
                        Rewrite in {voiceStyle.charAt(0).toUpperCase() + voiceStyle.slice(1)} Style
                      </Button>
                    </CardContent>
                  </Card>


                </div>
              </div>
            </TabsContent>
          </Tabs>
        </div>
      </div>

      <MobileTabBar />
    </div>
  );
}
